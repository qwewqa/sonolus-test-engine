import manager
import constants

const NOTE_SIZE = 0.4
const PERFECT_WINDOW = 0.050
const GREAT_WINDOW = 0.100
const GOOD_WINDOW = 0.120
const BURST_DURATION = 0.1
const NOTE_BURST_SCALE = 1.5
const TARGET_BURST_SCALE = 2

const TARGET_SPRITE = 41001

const NOTE_SPRITE = 1001

const FLICK_SPRITE = 1005
const FLICK_VELOCITY = 1.5
const FLICK_SOUND = 4
const FLICK_WINDOW = 0.1
const FLICK_INDICATOR_SPRITE = 21005
const FLICK_INDICATOR_OFFSET = NOTE_SIZE * 0.35 // starting offset
const FLICK_INDICATOR_SIZE = NOTE_SIZE * 0.8
const FLICK_INDICATOR_WIDTH_FACTOR = 1.25
const FLICK_INDICATOR_ADDITIONAL_OFFSET = NOTE_SIZE * 0.4 // final offset at progress >= 1

const HOLD_SPRITE = 1003
const HOLD_WINDOW = 0.08

archetype BasicNote :: #Note(targetX = 0, targetY = 0,
                            spawnDistance = 1.5, angle = 0, preemptTime = 0.7,
                            fadeinTime = 0.1, scale = 1, visualScale = 1, noteZ = 0, _showTarget = 1)

script Note(_targetTime, _targetX, _targetY, _spawnDistance, _angle,
            _preemptTime, _fadeinTime, _scale, _visualScale, _noteZ, _showTarget) {
    inline val targetTime = Number(_targetTime)
    inline val targetX = Number(_targetX)
    inline val targetY = Number(_targetY)
    inline val spawnDistance = Number(_spawnDistance) * preemptFactor
    inline val preemptTime = Number(_preemptTime) * preemptFactor
    inline val fadeinTime = Number(_fadeinTime) * preemptFactor
    inline val scale = Number(_scale)
    inline val noteZ = Number(_noteZ)
    inline val visualScale = Number(_visualScale)
    inline val showTarget = Boolean(_showTarget)

    val angle = Number(_angle).toRad
    val size = NOTE_SIZE * scale
    val visualSize = size * visualScale
    val zOffset = (targetTime - preemptTime) / 100 // additional z offset so that stacked notes appear ok

    inline val adjustedTargetTime = targetTime + inputOffset
    inline val spawnedDuration = preemptTime - (targetTime - now)
    inline val timeToTarget = targetTime - now
    inline val timeToAdjustedTarget = adjustedTargetTime - now
    inline val alpha = (spawnedDuration / fadeinTime).clamp(0, maxAlpha)
    inline val progress = spawnedDuration / preemptTime
    inline val relativePosition = timeToTarget / preemptTime
    inline val noteX = targetX + cos(angle) * spawnDistance * relativePosition
    inline val noteY = targetY + sin(angle) * spawnDistance * relativePosition
    inline val notePosition = Point(noteX, noteY)
    inline val targetPosition = Point(targetX, targetY)

    var hit = false
    var miss = false
    var maxAlpha = 1

    callback shouldSpawn {
        targetTime - now <= preemptTime + SPAWN_PREEMPT
    }

    callback updateParallel {
        if (hidden) {
            maxAlpha = 1 - progress.clamp(0, 1)
        }

        if (showTarget) {
            Rectangle(targetPosition, visualSize, visualSize, angle).drawSprite(TARGET_SPRITE, -100 + zOffset, alpha)
        }
        Rectangle(notePosition, visualSize, visualSize, angle).drawSprite(NOTE_SPRITE, noteZ + zOffset, alpha)

        if (timeToAdjustedTarget < -GOOD_WINDOW) {
            miss = true
        }

        hit || miss
    }

    callback touch {
        if (!touchOccupied && touchStarted) {
            if (!hit && targetPosition.distanceTo(touchPosition) <= size &&
                timeToAdjustedTarget.abs() <= GOOD_WINDOW) {
                touchOccupied = true
                hit = true
                judgement = judge(now, adjustedTargetTime, PERFECT_WINDOW, GREAT_WINDOW, GOOD_WINDOW)
                play(judgement, MIN_EFFECT_TIME)
                if (showBursts) {
                    if (showTarget) {
                        Burst(TARGET_SPRITE, BURST_DURATION, TARGET_BURST_SCALE, targetX, targetY, visualSize, visualSize, 200 + zOffset, angle)
                    }
                    Burst(NOTE_SPRITE, BURST_DURATION, NOTE_BURST_SCALE, noteX, noteY, visualSize, visualSize, 200 + zOffset, angle)
                }
            }
        }
    }
}

archetype HoldNote :: #Hold(targetX = 0, targetY = 0,
                            spawnDistance = 1.5, angle = 0, preemptTime = 0.7,
                            fadeinTime = 0.1, scale = 1, visualScale = 1, noteZ = 0, _showTarget = 1)

script Hold(_targetTime, _targetX, _targetY, _spawnDistance, _angle,
            _preemptTime, _fadeinTime, _scale, _visualScale, _noteZ, _showTarget) {
    inline val targetTime = Number(_targetTime)
    inline val targetX = Number(_targetX)
    inline val targetY = Number(_targetY)
    inline val spawnDistance = Number(_spawnDistance) * preemptFactor
    inline val preemptTime = Number(_preemptTime) * preemptFactor
    inline val fadeinTime = Number(_fadeinTime) * preemptFactor
    inline val scale = Number(_scale)
    inline val noteZ = Number(_noteZ)
    inline val visualScale = Number(_visualScale)
    inline val showTarget = Boolean(_showTarget)

    val angle = Number(_angle).toRad
    val size = NOTE_SIZE * scale
    val visualSize = size * visualScale
    val zOffset = (targetTime - preemptTime) / 100 // additional z offset so that stacked notes appear ok

    inline val adjustedTargetTime = targetTime + inputOffset
    inline val spawnedDuration = preemptTime - (targetTime - now)
    inline val timeToTarget = targetTime - now
    inline val timeToAdjustedTarget = adjustedTargetTime - now
    inline val alpha = (spawnedDuration / fadeinTime).clamp(0, maxAlpha)
    inline val progress = spawnedDuration / preemptTime
    inline val relativePosition = timeToTarget / preemptTime
    inline val noteX = targetX + cos(angle) * spawnDistance * relativePosition
    inline val noteY = targetY + sin(angle) * spawnDistance * relativePosition
    inline val notePosition = Point(noteX, noteY)
    inline val targetPosition = Point(targetX, targetY)

    var hit = false
    var miss = false
    var maxAlpha = 1

    callback shouldSpawn {
        targetTime - now <= preemptTime + SPAWN_PREEMPT
    }

    callback updateParallel {
        if (hidden) {
            maxAlpha = 1 - progress.clamp(0, 1)
        }

        if (showTarget) {
            Rectangle(targetPosition, visualSize, visualSize, angle).drawSprite(TARGET_SPRITE, -100 + zOffset, alpha)
        }
        Rectangle(notePosition, visualSize, visualSize, angle).drawSprite(HOLD_SPRITE, noteZ + zOffset, alpha)

        if (timeToAdjustedTarget < -HOLD_WINDOW) {
            miss = true
        }

        hit || miss
    }

    callback touch {
        if (!hit && targetPosition.distanceTo(touchPosition) <= size &&
                timeToAdjustedTarget.abs() <= HOLD_WINDOW) {
            // note that hold notes don't occupy the input
            hit = true
            judgement = 1
            play(1, MIN_EFFECT_TIME)
            if (showBursts) {
                if (showTarget) {
                    Burst(TARGET_SPRITE, BURST_DURATION, TARGET_BURST_SCALE, targetX, targetY, visualSize, visualSize, 200 + zOffset, angle)
                }
                Burst(HOLD_SPRITE, BURST_DURATION, NOTE_BURST_SCALE, noteX, noteY, visualSize, visualSize, 200 + zOffset, angle)
            }
        }
    }
}

archetype FlickNote :: #Flick(targetX = 0, targetY = 0,
                            spawnDistance = 1.5, angle = 0, preemptTime = 0.7,
                            fadeinTime = 0.1, scale = 1, visualScale = 1, noteZ = 0, _showTarget = 1)

script Flick(_targetTime, _targetX, _targetY, _spawnDistance, _angle,
             _preemptTime, _fadeinTime, _scale, _visualScale, _noteZ, _showTarget) {
    inline val targetTime = Number(_targetTime)
    inline val targetX = Number(_targetX)
    inline val targetY = Number(_targetY)
    inline val spawnDistance = Number(_spawnDistance) * preemptFactor
    inline val preemptTime = Number(_preemptTime) * preemptFactor
    inline val fadeinTime = Number(_fadeinTime) * preemptFactor
    inline val scale = Number(_scale)
    inline val noteZ = Number(_noteZ)
    inline val visualScale = Number(_visualScale)
    inline val showTarget = Boolean(_showTarget)

    val angle = Number(_angle).toRad
    val size = NOTE_SIZE * scale
    val visualSize = size * visualScale
    val indicatorSize = FLICK_INDICATOR_SIZE * scale * visualScale
    val zOffset = (targetTime - preemptTime) / 100 // additional z offset so that stacked notes appear ok
    inline val indicatorOffset = (FLICK_INDICATOR_OFFSET +
                           FLICK_INDICATOR_ADDITIONAL_OFFSET * progress.clamp(0, 1)) * scale * visualScale

    inline val adjustedTargetTime = targetTime + inputOffset
    inline val spawnedDuration = preemptTime - (targetTime - now)
    inline val timeToTarget = targetTime - now
    inline val timeToAdjustedTarget = adjustedTargetTime - now
    inline val alpha = (spawnedDuration / fadeinTime).clamp(0, maxAlpha)
    inline val progress = spawnedDuration / preemptTime
    inline val relativePosition = timeToTarget / preemptTime
    inline val noteX = targetX + cos(angle) * spawnDistance * relativePosition
    inline val noteY = targetY + sin(angle) * spawnDistance * relativePosition
    inline val notePosition = Point(noteX, noteY)
    inline val targetPosition = Point(targetX, targetY)

    var hit = false
    var miss = false
    var maxAlpha = 1

    callback shouldSpawn {
        targetTime - now <= preemptTime + SPAWN_PREEMPT
    }

    callback updateParallel {
        if (hidden) {
            maxAlpha = 1 - progress.clamp(0, 1)
        }

        if (showTarget) {
            Rectangle(targetPosition, visualSize, visualSize, angle).drawSprite(TARGET_SPRITE, -100 + zOffset, alpha)
        }
        Rectangle(notePosition, visualSize, visualSize, angle).drawSprite(FLICK_SPRITE, noteZ + zOffset, alpha)
        Rectangle(notePosition + Point(0, indicatorOffset).rotated(0.toRad + angle), FLICK_INDICATOR_WIDTH_FACTOR * indicatorSize, indicatorSize)
            .rotated(0.toRad + angle)
            .drawSprite(FLICK_INDICATOR_SPRITE, noteZ - 0.1 + zOffset, alpha)
        Rectangle(notePosition + Point(0, indicatorOffset).rotated(180.toRad + angle), FLICK_INDICATOR_WIDTH_FACTOR * indicatorSize, indicatorSize)
            .rotated(180.toRad + angle)
            .drawSprite(FLICK_INDICATOR_SPRITE, noteZ - 0.1 + zOffset, alpha)

        if (timeToAdjustedTarget < -FLICK_WINDOW) {
            miss = true
        }

        hit || miss
    }

    callback touch {
        if (!hit && targetPosition.distanceTo(touchPosition) <= size &&
                timeToAdjustedTarget.abs() <= FLICK_WINDOW &&
                touchVelocityR >= FLICK_VELOCITY) {
                // like holds, these don't occupy input
                hit = true
                judgement = 1
                play(FLICK_SOUND, MIN_EFFECT_TIME)
                if (showBursts) {
                    if (showTarget) {
                        Burst(TARGET_SPRITE, BURST_DURATION, TARGET_BURST_SCALE, targetX, targetY, visualSize, visualSize, 200 + zOffset, angle)
                    }
                    Burst(FLICK_SPRITE, BURST_DURATION, NOTE_BURST_SCALE, noteX, noteY, visualSize, visualSize, 200 + zOffset, angle)
                }
        }
    }
}

script Burst() {
    spawninit val _sprite
    spawninit val _duration
    spawninit val _endScale
    spawninit val _x
    spawninit val _y
    spawninit val _startWidth
    spawninit val _startHeight
    spawninit val _z
    spawninit val _angle
    inline val sprite = Number(_sprite)
    inline val duration = Number(_duration)
    inline val endScale = Number(_endScale)
    inline val x = Number(_x)
    inline val y = Number(_y)
    inline val startWidth = Number(_startWidth)
    inline val startHeight = Number(_startHeight)
    inline val z = Number(_z)
    inline val angle = Number(_angle)

    val startTime = now

    inline val progress = (now - startTime) / duration
    inline val scale = 1 + progress * (endScale - 1)

    callback updateParallel {
        if (now - startTime <= duration) {
            Rectangle(x, y, startWidth * scale, startHeight * scale, angle).drawSprite(sprite, z, 1 - progress)
        } else {
            true
        }
    }
}